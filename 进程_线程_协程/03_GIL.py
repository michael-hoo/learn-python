'''GIL
1. Python速度慢的两大原因
 - Python是动态类型语言, 需要边解释边执行.
    - 像C/C++在开发完之后, 需要进行编译, 编译之后的机器码在计算机上执行效率是相当高的!
    - 而Python在执行时就是直接执行源码, 在运行的过程中编译成机器码, 这会消耗时间.
 - GIL的存在, 导致Python无法利用多核CPU并发执行.
2. GIL是什么?
 - GIL, 全拼 Global Interpreter Lock, 全局解释器锁. 它会使得任何时刻下, 同一进程内的
   所有进程, 都只有一个在运行, 即便是多核CPU, 依旧如此. 
 - 想要突破此障碍, 只能用多进程, 因为每个进程之间的GIL是相互独立的.
3. 为什么会有GIL这个东西?
 - GIL最初的引入是为了解决CPython在多线程编程时会出现的问题(这么看和多线程的Lock确实很像).
 - 且那时虽然有了多核的概念, 但多核计算机尚不存在, 作者没考虑那么多直接加了个全局锁.
 - 等到后来想改的时候已经来不及了, 很多第三方模块都引入了GIL, 直接移除会使第三方模块不可用.
4. 怎样规避GIL带来的限制? 
 - 多线程机制仍然是有用处的, 它适用于IO密集型计算. 
    - 因为在IO期间, 线程会释放GIL, 实现CPU和IO的并行, 多线程运用于IO密集型任务可大幅提升效率.
    - 但多线程用于CPU密集型任务, 反而会降低速度.
        - 因为多个线程同时只能使用一个核, 只能并发, 不能并行.
        - 同时只能跑一个线程就相当于单线程, 且线程切换也需要耗费时间.
 - 使用多进程机制充分利用多CPU优势, 实现并行运算.
    - 因为不同进程的GIL是相互独立的, 所以, 我可以创建多个进程, 每个进程中跑一个线程进行计算.
    - 这样一来, 多核CPU的性能就会被充分利用了.
    - 这样看来, Python的计算性能也不比Java差多少, Java用4个线程做的事, Python大不了用4个
      进程做就好了, 虽说会浪费点系统资源, 但至少能做.
'''